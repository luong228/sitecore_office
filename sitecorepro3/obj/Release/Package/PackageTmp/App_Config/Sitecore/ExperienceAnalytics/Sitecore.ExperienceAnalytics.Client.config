<?xml version="1.0" encoding="utf-8"?>
<!--

Purpose: This file enables the components and features related to Experience Analytics client features.

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore role:require="Standalone or ContentManagement">
        <services>
            <configurator type= "Sitecore.ExperienceAnalytics.Client.ClientConfigurator, Sitecore.ExperienceAnalytics.Client" />
            <configurator role:require="ContentManagement" type= "Sitecore.ExperienceAnalytics.Client.HttpServicesConfigurator, Sitecore.ExperienceAnalytics.Client" />
        </services>
        <experienceAnalytics>
            <client>
                <!-- Obsoleted and will be removed in the future releases, the logger has been registered into dependency injection-->
                <logger type="Sitecore.ExperienceAnalytics.Core.Diagnostics.ILogger, Sitecore.ExperienceAnalytics.Core" resolve="true"/>

                <services>

                    <!-- AggregationSegmentReader is responsible for reading aggregation segments from reference data store.-->
                    <aggregationSegmentReader
                        type="Sitecore.ExperienceAnalytics.Aggregation.Repositories.AggregationSegmentReader, Sitecore.ExperienceAnalytics.Aggregation">
                        <param desc="logger" ref="experienceAnalytics/client/logger" />
                        <param desc="segmentDefinitionReader"
                               ref="experienceAnalytics/services/experienceAnalyticsSegmentReader" />
                    </aggregationSegmentReader>
                    
                    <!-- SegmentReader is responsible for reading segment items from master database.-->
                    <segmentReader type="Sitecore.ExperienceAnalytics.Client.Deployment.SegmentItemReader, Sitecore.ExperienceAnalytics.Client">
                        <param ref="experienceAnalytics/client/logger" />
                    </segmentReader>

                    <!-- SiteReader is responsible for reading data from the SiteNames dimension table in RDB.
                       The 'connectionStringName' parameter the name of the connection string of the RDB instance to connect to.
                       Default: "reporting"
                    -->
                    <siteReader
                        type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteFilter.FilterReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core" singleInstance="true">
                        <param
                            type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [Sitecore.ExperienceAnalytics.Core.Repositories.Model.Site, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core">
                            <param
                                type="Sitecore.ExperienceAnalytics.Core.Repositories.SiteRemoteReader, Sitecore.ExperienceAnalytics.Core">
                                <param
                                    type="Sitecore.ExperienceAnalytics.Client.ClientContainer, Sitecore.ExperienceAnalytics.Client"
                                    factoryMethod="GetLazyReportingDataProvider" />
                                <param desc="reportingDataSourceName">reporting</param>
                            </param>
                            <param desc="cacheName">ExperienceAnalytics.Sites</param>
                            <param desc="cacheMaxSize">1048576</param>
                            <param desc="cacheExpiration">00:05:00</param>
                            <param desc="useSlidingCacheExpiration">false</param>
                            <param desc="logger" ref="experienceAnalytics/client/logger" />
                        </param>
                        <filters hint="list:AddFilter">
                        </filters>
                    </siteReader>

                    <!-- segmentationReader is responsible for reading data from the segment from marketing segmentation with cache implementation. -->
                    <segmentationReader
                        type="Sitecore.ExperienceAnalytics.Core.Repositories.Decorator.CachedCultureReaderDecorator`2[[System.Guid], [Sitecore.ExperienceAnalytics.Core.Repositories.Contracts.ISegmentDefinition, Sitecore.ExperienceAnalytics.Core]], Sitecore.ExperienceAnalytics.Core" singleInstance="true">
                        <param desc="segmentReader" ref="experienceAnalytics/services/marketingSegmentReader"/>
                        <param desc="cacheName">ExperienceAnalytics.SegmentationReader</param>
                        <param desc="cacheMaxSize">52428800</param>
                        <param desc="cacheExpiration">00:00:01:00</param>
                        <param desc="useSlidingCacheExpiration">true</param>
                        <param desc="logger" ref="experienceAnalytics/client/logger" />
                    </segmentationReader>

                    <requestRedirection
                        type="Sitecore.ExperienceAnalytics.Client.Pipelines.HttpRequest.RequestRedirection, Sitecore.ExperienceAnalytics.Client">
                        <param
                            type="Sitecore.ExperienceAnalytics.Core.Adapters.XDbSettingsAdapter, Sitecore.ExperienceAnalytics.Core" />
                        <param ref="experienceAnalytics/client/logger" />
                    </requestRedirection>

                    <encoder
                        type="Sitecore.ExperienceAnalytics.Api.Encoding.Hash64Encoder, Sitecore.ExperienceAnalytics.Api" />

                    <keyCodec
                        type="Sitecore.ExperienceAnalytics.Api.Encoding.HashKeysCodec, Sitecore.ExperienceAnalytics.Api">
                        <param desc="encoder" ref="experienceAnalytics/client/services/encoder" />
                        <param desc="decoder"
                               type="Sitecore.ExperienceAnalytics.Api.Encoding.PresetsEnabledKeyDecoder, Sitecore.ExperienceAnalytics.Api">
                            <param desc="hashMampping"
                                   type="Sitecore.ExperienceAnalytics.Api.Encoding.HashMapper, Sitecore.ExperienceAnalytics.Api">
                                <param desc="keysProvider"
                                       type="Sitecore.ExperienceAnalytics.Api.Encoding.InMemoryPresetKeysProvider, Sitecore.ExperienceAnalytics.Api" />
                                <param desc="encoder" ref="experienceAnalytics/client/services/encoder" />
                            </param>
                            <param desc="decoder"
                                   type="Sitecore.ExperienceAnalytics.Api.Encoding.DatabaseKeyDecoder, Sitecore.ExperienceAnalytics.Api">
                                <param desc="keysReader" ref="experienceAnalytics/client/services/hashKeysProvider" />
                            </param>
                        </param>
                    </keyCodec>

                    <!-- hashKeysProvider is responsible for hash of entities stored in database. -->
                    <hashKeysProvider
                        type="Sitecore.ExperienceAnalytics.Core.Repositories.CachedReaderDecorator`2[[System.String], [System.String]], Sitecore.ExperienceAnalytics.Core" singleInstance="true">
                        <param
                            type="Sitecore.ExperienceAnalytics.Core.Repositories.DimensionKeyRemoteReader, Sitecore.ExperienceAnalytics.Core">
                            <param
                                type="Sitecore.ExperienceAnalytics.Client.ClientContainer, Sitecore.ExperienceAnalytics.Client"
                                factoryMethod="GetLazyReportingDataProvider" />
                            <param desc="reportingDataSourceName">reporting</param>
                            <param desc="logger" ref="experienceAnalytics/client/logger" />
                        </param>
                        <param desc="cacheName">ExperienceAnalytics.DimensionKeys</param>
                        <param desc="cacheMaxSize">52428800</param>
                        <param desc="cacheExpiration">365:00:00:00</param>
                        <param desc="useSlidingCacheExpiration">true</param>
                        <param desc="logger" ref="experienceAnalytics/client/logger" />
                    </hashKeysProvider>
                </services>

                <segmentDeployedEventHandler type="Sitecore.ExperienceAnalytics.Client.Deployment.Events.SegmentDeployedEventHandler, Sitecore.ExperienceAnalytics.Client">
                    <param
                        type="Sitecore.ExperienceAnalytics.Client.Deployment.DeploySegmentDefinitionProcessor, Sitecore.ExperienceAnalytics.Client">
                        <param ref="experienceAnalytics/client/logger" />
                        <param ref="experienceAnalytics/services/experienceAnalyticsSegmentStore"/>
                    </param>
                    <param ref="experienceAnalytics/services/experienceAnalyticsSegmentStore"/>
                    <param ref="experienceAnalytics/services/experienceAnalyticsSegmentReader"/>
                </segmentDeployedEventHandler>
            </client>
        </experienceAnalytics>
        <pipelines>
            <initialize>
                <!-- One-time run code that synchronizes a segment if it's workflow state is 'Deployed' but non-existent in db, with DeployDate = UTC.NOW -->
                <processor
                    type="Sitecore.ExperienceAnalytics.Client.Deployment.SyncSegmentsProcessor, Sitecore.ExperienceAnalytics.Client" resolve="true"
                    patch:after="processor[position()=last()]"/>
            </initialize>
            <httpRequestBegin>
                <processor
                    type="Sitecore.ExperienceAnalytics.Client.Pipelines.HttpRequest.RedirectRequest, Sitecore.ExperienceAnalytics.Client"
                    patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']">
                    <param ref="experienceAnalytics/client/services/requestRedirection" />
                </processor>
            </httpRequestBegin>
            <owin.cookieAuthentication.validateIdentity>
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateSiteNeutralPaths, Sitecore.Owin.Authentication">
                    <siteNeutralPaths>
                        <path name="XA">/sitecore/api/ao/</path>
                    </siteNeutralPaths>
                </processor>
            </owin.cookieAuthentication.validateIdentity>
            <experienceAnalytics.syncSegments>
                <processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.SyncSegments.ReadSegmentsProcessor, Sitecore.ExperienceAnalytics.Client">
                    <param desc="logger" type="Sitecore.ExperienceAnalytics.Core.Diagnostics.ILogger, Sitecore.ExperienceAnalytics.Core" resolve="true"/>
                    <param desc="segmentReader" ref="experienceAnalytics/services/experienceAnalyticsSegmentReader" />
                    <param desc="segmentItemReader" ref="experienceAnalytics/client/services/segmentReader"/>
                </processor>
                <processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.SyncSegments.DeployMissingSegmentsInRefDataProcessor, Sitecore.ExperienceAnalytics.Client" resolve="true"/>
                <processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.SyncSegments.ActivateSegmentsProcessor, Sitecore.ExperienceAnalytics.Client" resolve="true"/>
                <processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.SyncSegments.SyncFilterIdProcessor, Sitecore.ExperienceAnalytics.Client" resolve="true"/>
                <processor type="Sitecore.ExperienceAnalytics.Client.Pipelines.SyncSegments.SyncSystemDimensionProcessor, Sitecore.ExperienceAnalytics.Client" resolve="true"/>
            </experienceAnalytics.syncSegments>
        </pipelines>
        <settings>
            <!-- EXPERIENCE ANALYTICS - DEFAULT DATE RANGE OFFSET - FROM
           The default offset (in days) that is used in a date range filter for the 'from date'.
           Default value: -90
        -->
            <setting name="ExperienceAnalytics.DefaultDateRangeOffset.From" value="-90" />

            <!-- EXPERIENCE ANALYTICS - DEFAULT DATE RANGE OFFSET - TO
           The default offset (in days) that is used in a date range filter for the 'to date'.
           Default value: -1
        -->
            <setting name="ExperienceAnalytics.DefaultDateRangeOffset.To" value="-1" />

            <!-- EXPERIENCE ANALYTICS
           The default cache SegmentationReader for dropdown selection in the client side.
           If the cache is turned on, the reader will read from experienceAnalytics/client/services/segmentationReader in current configuration files
           else it will use the reader from experienceAnalytics/services/marketingSegmentReader in Sitecore.ExperienceAnalytics.config
           Default value: false
          -->
            <setting name="ExperienceAnalytics.UseSegmentationReaderCache" value="false" />
        </settings>
        <events>
            <event name="item:saved">
                <handler ref="experienceAnalytics/client/segmentDeployedEventHandler" method="OnItemSaved"/>
            </event>
            <event name="item:deleted">
                <handler ref="experienceAnalytics/client/segmentDeployedEventHandler" method="OnItemDeleted"/>
            </event>
        </events>
    </sitecore>
</configuration>
