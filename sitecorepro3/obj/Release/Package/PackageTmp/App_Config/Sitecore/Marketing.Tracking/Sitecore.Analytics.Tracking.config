<?xml version="1.0" encoding="utf-8"?>

<!--

Purpose: This include file configures the tracking subsystem of the Sitecore Experience Database (xDB).
The tracking subsystem is responsible for tracking of online visitors. The system tracks personalization, goals,
campaigns, profile values, patterns, multivariate tests, etc.

If you want to disable this functionality and prevent online tracking of visitors, you can rename this config file
so that it has a ".disabled" extension.

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:marketingDefinitionsAssignment="http://www.sitecore.net/xmlconfig/trackingMarketingDefinitionsAssignment/">
  <sitecore role:require="Standalone or ContentDelivery or ContentManagement">
    <settings>
      <!--  ANALYTICS AUTO DETECT BOTS
            Enable auto detection of bots.
            Default: true
      -->
      <setting name="Analytics.AutoDetectBots" value="true" />

      <!--  ANALYTICS CAMPAIGN QUERY STRING KEY
            Specifies the key for triggering campaigns on the query string.
            Default: sc_camp
      -->
      <setting name="Analytics.CampaignQueryStringKey" value="sc_camp" />

      <!--  ANALYTICS CONTACT MAXIMUM INTERACTIONS
            Maximum number of interactions in contact history that can be loaded
            by personalization components on website pages.
            Default: 25
      -->
      <setting name="Analytics.ContactHistory.MaxInteractions" value="25" />

      <!--  ANALYTICS EVENT QUERY STRING KEY
            Specifies the key for triggering events on the query string.
            Default: sc_trk
      -->
      <setting name="Analytics.EventQueryStringKey" value="sc_trk" />

      <!--  ANALYTICS FORWARDED REQUEST HTTP HEADER
            Specifies the name of an HTTP header variable containing the IP address of the webclient.
            Only for use behind load-balancers that mask web client IP addresses from webservers.
            IMPORTANT: If this setting is used incorrectly, it allows IP address spoofing.
            Typical values are "X-Forwarded-For" and "X-Real-IP".
            Default value: "" (disabled)
      -->
      <setting name="Analytics.ForwardedRequestHttpHeader" value="" />

      <!--  ANALYTICS FORWARDED REQUEST HTTP HEADER CLIENT IP INDEX
            Specifies the index of client ip address in ForwardedRequestHttpHeader.
            Default value: "0"
      -->
      <setting name="Analytics.ForwardedRequestHttpHeaderClientIpIndex" value="0" />

      <!--  ANALYTICS LONG RUNNING PAGE REQUEST
            Defines the threshold for long running pages in milliseconds.
            Default: 5000
      -->
      <setting name="Analytics.LongRunningRequest" value="5000" />

      <!--  ANALYTICS - REDACT IP ADDRESS
            Determines if the IP addresses that initiated the interaction are redacted when writing to the database.
            When the setting is enabled, the database stores an empty IP address (0.0.0.0) instead of the actual IP address.
            Default value: false
      -->
      <setting name="Analytics.RedactIpAddress" value="false" />

      <!--  ANALYTICS ROBOTS IGNORE ROBOTS
            Ignore requests and do not write information to the Analytics database when the visitor
            classification identifies the visitor as a robot.
            Default: true
      -->
      <setting name="Analytics.Robots.IgnoreRobots" value="true" />

      <!--  ANALYTICS ROBOTS SESSION TIMEOUT
            The ASP.NET Session Timeout for auto detected robots.
            When the automatic robot detection identifies a session as being a robot, the ASP.NET
            Session Timeout is set to this value (in minutes).
            Default: 1
      -->
      <setting name="Analytics.Robots.SessionTimeout" value="1" />

      <!--  ANALYTICS SAMPLING PERCENTAGE
            Specifies the percentage of sessions that analytics data should be collected for.
            Default: 100 (collect data for all sessions)
      -->
      <setting name="Analytics.Sampling.Percentage" value="100" />

      <!--  ANALYTICS SUPPRESS TRACKING INITIALIZATION EXCEPTIONS
            Specifies whether exceptions thrown during tracking initialization should be suppressed.
            Default: true
      -->
      <setting name="Analytics.SuppressTrackingInitializationExceptions" value="true" />

      <!--  ANALYTICS TRACKING COOKIE LIFETIME
            Specifies the lifetime of the tracking cookie in hours.
            Default: 87600 (10 years)
      -->
      <setting name="Analytics.CookieLifetime" value="87600" />

      <!-- ANALYTICS TRACKING COOKIE DOMAIN
            Specifies the name of the cookie domain for multi-domain tracking to share the contact cookie cross all domains.
            Default: <None>
     -->
      <setting name="Analytics.CookieDomain" value="" />

      <!--  ANALYTICS CONSENT FOR TRACKING COOKIE LIFETIME
            Specifies the lifetime of the consent for tracking cookie in hours.
            Default: 87600 (10 years)
      -->
      <setting name="Analytics.Consent.CookieLifetime" value="87600" />

      <!--  ANALYTICS USE SUBMIT QUEUE
            Specifies if the submit queue should be used when the contact or session submit operations cannot access the database.
            If set to true, the contact or session is queued until the database is back up (see the <submitQueue> section).
            Default: true
      -->
      <setting name="Analytics.UseSubmitQueue" value="true" />

      <!--  ANALYTICS ITEMRECORDS ID CACHE SIZE
              Sets the size of the cache, which stores analytics definition IDs by name.
              Default value: 10MB
      -->
      <setting name="Analytics.ItemRecordsIDCache.Size" value="10MB" />

      <!--  PROFILES WITH DEFAULT VALUES CACHE SIZE
              Sets the size of the cache which stores the default values for the profiles.
              Default value: 100MB
      -->
      <setting name="Analytics.ProfilesWithDefaultValuesCache.Size" value="100MB" />

      <!--  ANALYTICS IS SHARED SESSION ENABLED
            Specifies if the shared session should be used to share contact data between parallel active sessions.
            If set to false, contact is stored in the current session and changes made to contact object in one session will not be visible to another session.
            Default: false
      -->
      <setting name="Analytics.IsSharedSessionEnabled" value="false" />

      <!--  XDB TRACKING ENDPOINT ENABLED
            Enables the sitecore/api/tracker web API endpoint.
            Default: false
      -->
      <setting name="Xdb.Tracking.Endpoint.Enabled" value="false" />
    </settings>

    <behaviorProfileConverter type="Sitecore.Analytics.Data.BehaviorProfileConverter, Sitecore.Analytics"
                              singleInstance="false" />

    <commands>
      <command name="analytics:opengoals"
               type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenGoals,Sitecore.Xdb.Tracking.Client" />
      <command name="analytics:opentrackingfield"
               type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenTrackingField,Sitecore.Xdb.Tracking.Client" />
      <command name="analytics:viewtrackingdetails"
               type="Sitecore.Shell.Applications.Analytics.TrackingField.ViewTrackingDetails,Sitecore.Xdb.Tracking.Client" />
      <command name="item:personalizeprofile"
               type="Sitecore.Shell.Applications.Analytics.TrackingField.SetProfileValue,Sitecore.Xdb.Tracking.Client" />
    </commands>

    <contactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true" />

    <dataAdapterManager defaultProvider="xconnect">
      <providers>
        <clear />
        <add name="xconnect" type="Sitecore.Analytics.XConnect.DataAccess.XConnectDataAdapterProvider, Sitecore.Analytics.XConnect">
          <facets hint="raw:AddFacet">
            <!-- Removing some of the default facets (Classification, EngagementMeasures, etc.) can cause issues, because there is code depending on them. -->
            <facet facetKey="Classification" />
            <facet facetKey="EngagementMeasures" />
            <facet facetKey="ContactBehaviorProfile" />
            <facet facetKey="Personal" />
            <facet facetKey="KeyBehaviorCache" />
            <facet facetKey="ListSubscriptions" />
          </facets>
          <GetOperationTimeout>0.00:00:05</GetOperationTimeout>
        </add>
      </providers>
    </dataAdapterManager>

    <events>
      <event name="sessionEnd:starting">
        <handler type="Sitecore.Analytics.Events.DiagnosticsEventHandler, Sitecore.Analytics" method="OnSessionEndStarting" />
      </event>

      <event name="sessionEnd:batch:starting">
        <handler type="Sitecore.Analytics.Events.DiagnosticsEventHandler, Sitecore.Analytics" method="OnBatchStarting" />
        <handler type="Sitecore.Analytics.Events.BatchEventHandler, Sitecore.Analytics" method="OnBatchStarting" />
      </event>

      <event name="sessionEnd:batch:ended">
        <handler type="Sitecore.Analytics.Events.BatchEventHandler, Sitecore.Analytics" method="OnBatchEnded" />
        <handler type="Sitecore.Analytics.Events.DiagnosticsEventHandler, Sitecore.Analytics" method="OnBatchEnded" />
      </event>

      <event name="item:saved">
        <handler type="Sitecore.Analytics.Data.ItemEventHandler, Sitecore.Analytics" method="OnItemSaved" />
        <handler type="Sitecore.Analytics.Data.Caches.ProfilesWithDefaultValuesCacheHandler, Sitecore.Analytics" method="OnItemSaved" resolve="true" />
      </event>

      <event name="item:saved:remote">
        <handler type="Sitecore.Analytics.Data.Caches.ProfilesWithDefaultValuesCacheHandler, Sitecore.Analytics" method="OnItemSavedRemote" resolve="true" />
      </event>

      <event name="item:deleted">
        <handler type="Sitecore.Analytics.Data.Caches.ProfilesWithDefaultValuesCacheHandler, Sitecore.Analytics" method="OnItemDeleted" resolve="true" />
      </event>

      <event name="item:deleted:remote">
        <handler type="Sitecore.Analytics.Data.Caches.ProfilesWithDefaultValuesCacheHandler, Sitecore.Analytics" method="OnItemDeletedRemote" resolve="true" />
      </event>

      <event name="publish:end">
        <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
      </event>

      <event name="publish:end:remote">
        <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
      </event>
    </events>

    <hooks>
      <hook type="Sitecore.Analytics.ConfigLoader, Sitecore.Analytics" />
      <hook type="Sitecore.Analytics.BackgroundServiceLoader, Sitecore.Analytics" />
    </hooks>

    <pipelines>
      <classificationStrategy>
        <processor
          type="Sitecore.Analytics.Pipelines.ClassificationStrategy.OverrideClassification, Sitecore.Analytics" />
        <processor
          type="Sitecore.Analytics.Pipelines.ClassificationStrategy.ContactClassifications, Sitecore.Analytics" />
      </classificationStrategy>

      <commitSession>
      </commitSession>

      <convertFromXConnectContact>
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertFromXConnectContactPipeline.ConvertFromXConnectContactProcessor, Sitecore.Analytics.XConnect" />
      </convertFromXConnectContact>

      <convertToXConnectInteraction>
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectInteractionPipeline.ConvertToXConnectInteractionProcessor, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectInteractionPipeline.ConvertToProfileScoresFacetProcessor, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectInteractionPipeline.ConvertToChangeProfileScoresEventProcessor, Sitecore.Analytics.XConnect" />
      </convertToXConnectInteraction>

      <convertToXConnectEvent>
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageDataToPageViewEvent, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertOutcomeDataToOutcome, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToCampaignEvent, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToDownloadEvent, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToSearchEvent, Sitecore.Analytics.XConnect" />
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToGoal, Sitecore.Analytics.XConnect" />
        <!--
        Ensure this processor is the last in the pipeline, because this processor converts page event data to default XConnect Event object.
        -->
        <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToEvent, Sitecore.Analytics.XConnect" />
      </convertToXConnectEvent>

      <createItemChangeTest>
        <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.PageVersionTest,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.MvTest,Sitecore.Analytics" />
      </createItemChangeTest>

      <createTracker>
        <processor type="Sitecore.Analytics.Pipelines.CreateTracker.GetTracker, Sitecore.Analytics" />
      </createTracker>

      <createVisit>
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeWithRequestData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.XForwardedFor, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.UpdateGeoIpData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseReferrer, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseSelfReferrer, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeProfile, Sitecore.Analytics" />
      </createVisit>

      <endAnalytics>
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SetRobotSessionTimeOut, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.NormalizeVisit, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SaveDuration, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.EndTracking, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.ReleaseContact, Sitecore.Analytics"
                   runIfAborted="true" />
      </endAnalytics>

      <ensureClassification>
        <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateGeoIpData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.EnsureClassification, Sitecore.Analytics" />
        <processor
          type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateContactClassification, Sitecore.Analytics" />
      </ensureClassification>

      <ensureSessionContext>
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContext, Sitecore.Analytics">
          <SessionContextManager ref="tracking/sessionContextManager"></SessionContextManager>
        </processor>
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureDevice, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContactId, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.LoadContact, Sitecore.Analytics">
          <ContactManager ref="tracking/contactManager" />
        </processor>
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CreateContact, Sitecore.Analytics">
          <ContactManager ref="tracking/contactManager" />
        </processor>
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CheckConsent, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.SetDummySession, Sitecore.Analytics">
          <MaxPageIndexThreshold>50</MaxPageIndexThreshold>
        </processor>
      </ensureSessionContext>

      <excludeRobots>
        <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.TryObtainCachedResult, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckUserAgent, Sitecore.Analytics" resolve="true" />
        <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckIpAddress, Sitecore.Analytics" resolve="true" />
        <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckDeviceType, Sitecore.Analytics" resolve="true" role:require="Standalone or ContentDelivery" />
        <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.AddResultToCache, Sitecore.Analytics" />
      </excludeRobots>

      <findVisitorEmailAddress>
        <processor
          type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics"
          method="FindEmailInUserName"
          patch:before="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']" />
        <processor
          type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics"
          method="FindEmailInTags"
          patch:after="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']" />
      </findVisitorEmailAddress>

      <getContentEditorWarnings>
        <processor
          type="Sitecore.Analytics.Pipelines.GetContentEditorWarnings.MissingMarketingProfiles, Sitecore.Analytics" />
      </getContentEditorWarnings>

      <getItemPersonalizationVisibility>
        <processor
          type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Analytics" />
        <processor
          type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Analytics" />
      </getItemPersonalizationVisibility>

      <handlePageError>
        <processor type="Sitecore.Analytics.Pipelines.HandlePageError.RegisterPageErrorProcessor, Sitecore.Analytics" />
      </handlePageError>

      <handlePageNotFound>
        <processor
          type="Sitecore.Analytics.Pipelines.HandlePageNotFound.RegisterPageNotFoundProcessor, Sitecore.Analytics" />
      </handlePageNotFound>

      <httpRequestBegin>
        <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel">
          <prefixes>
            <prefix name="tracking">/sitecore/api/tracker/</prefix>
          </prefixes>
        </processor>
      </httpRequestBegin>

      <httpRequestEnd>
        <processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics"
                   patch:before="processor[@type='Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel']" />
      </httpRequestEnd>

      <httpRequestProcessed>
        <processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics" />
      </httpRequestProcessed>

      <initialize>
        <processor type="Sitecore.Analytics.DataAccess.Pipelines.Loader.InitializePerformanceCounters, Sitecore.Analytics.DataAccess" />
        <processor type="Sitecore.Analytics.Pipelines.Loader.InitializeTracking, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.Loader.InitializeTrackerRoute, Sitecore.Analytics" resolve="true"/>
        <processor type="Sitecore.Analytics.Pipelines.Loader.StartThreadPoolSizeMonitor, Sitecore.Analytics">
          <param desc="accelerationRate">50</param>
          <param desc="decelerationRate">1</param>
          <param desc="updateInterval">00:00:00.500</param>
        </processor>
      </initialize>

      <initializeInteractionProfile>
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ResetProfiles, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.CopyProfiles, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ApplyDecay, Sitecore.Analytics" resolve="true" />
      </initializeInteractionProfile>

      <initializeTracker>
        <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.IsMediaRequest, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreateVisit, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreatePage, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureNextPageData, Sitecore.Analytics" />
        <processor
          type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureContactClassification, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.RunRules, Sitecore.Analytics" />
      </initializeTracker>

      <mergeContacts>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContacts, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactsClassification, Sitecore.Analytics" />
      </mergeContacts>

      <parseReferrer>
        <processor type="Sitecore.Analytics.Pipelines.ParseReferrer.ParseGenericSearchEngine,Sitecore.Analytics">
          <engines hint="raw:AddHostParameterName">
            <engine hostname="www.google" parametername="q" />
            <engine hostname="search.yahoo" parametername="p" />
            <engine hostname="www.bing" parametername="q" />
            <engine hostname="search.lycos" parametername="query" />
            <engine hostname="www.baidu">
              <parametername>wd</parametername>
              <parametername>word</parametername>
            </engine>
          </engines>
        </processor>
      </parseReferrer>

      <processItem>
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.CollectParameters,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.TriggerCampaigns,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.RegisterPageEvents,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.ProcessProfiles, Sitecore.Analytics" marketingDefinitionsAssignment:require="!RulesOnly" />
      </processItem>

      <registerOutcome>
      </registerOutcome>

      <registerPageEvent>
        <processor type="Sitecore.Analytics.Pipelines.RegisterPageEvent.RunPageEventRules, Sitecore.Analytics" />
      </registerPageEvent>

      <renderContentEditorHeader>
        <processor
          type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddProfileCards, Sitecore.Xdb.Tracking.Client"
          patch:after="processor[@type='Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddTitle, Sitecore.Client']" />
      </renderContentEditorHeader>

      <renderLayout>
        <processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartAnalytics, Sitecore.Analytics"
                   patch:after="processor[@type='Sitecore.Pipelines.RenderLayout.SecurityCheck, Sitecore.Kernel']" />
      </renderLayout>

      <sessionEnd>
        <processor type="Sitecore.Analytics.Pipelines.SessionEnd.InitializeTracker, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.SessionEnd.RaiseVisitEnd, Sitecore.Analytics" />
      </sessionEnd>

      <startAnalytics>
        <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CreateTracker, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.StartTracking, Sitecore.Analytics" />
      </startAnalytics>

      <startTracking>
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.RaiseStartTracking, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.InitializeTracker, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.TrackerInitialized, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.UpdateGeoIpData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringCampaign, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringPageEvent, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringTriggers, Sitecore.Analytics">
          <triggers hint="raw:AddTrigger">
            <trigger querystring="sc_rss" eventname="RSS" />
          </triggers>
        </processor>
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessItem, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.StartTracking.ExecuteMarketingRules, Sitecore.Analytics" marketingDefinitionsAssignment:require="!TrackingFieldOnly" resolve="true" />
      </startTracking>

      <submitSessionContext>
      </submitSessionContext>
      <triggerCampaign>
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.CheckPreconditions,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.RegisterPageEvent,Sitecore.Analytics" />
      </triggerCampaign>

      <visitEnd>
        <processor type="Sitecore.Analytics.Pipelines.VisitEnd.RunRules,Sitecore.Analytics" />
      </visitEnd>

      <getFallbackUserAgent>
        <processor type="Sitecore.Analytics.Pipelines.GetFallbackUserAgent.GetUserAgentFromTracker, Sitecore.Analytics" patch:before="processor[@type='Sitecore.CES.DeviceDetection.Pipelines.GetFallbackUserAgent.GetUserAgentFromRequest, Sitecore.CES.DeviceDetection']" />
      </getFallbackUserAgent>
    </pipelines>

    <submitQueue>
      <queue type="Sitecore.Analytics.Data.DataAccess.SubmitQueue.FileSubmitQueue, Sitecore.Analytics"
             singleInstance="true">
        <param desc="folderPath">$(dataFolder)/Submit Queue</param>
      </queue>
    </submitQueue>

    <tracking>
      <sessionContextManager type="Sitecore.Analytics.Data.HttpSessionContextManager, Sitecore.Analytics"
                             singleInstance="true" />

      <contactManager type="Sitecore.Analytics.Tracking.ContactManager, Sitecore.Analytics" singleInstance="true">
        <param desc="sharedSessionStateManager" type="Sitecore.Analytics.Tracking.SharedSessionState.ISharedSessionStateManager, Sitecore.Analytics" resolve="true" />

        <!-- The default contact repository is a stub that prevents the contact manager from reading and writing to the collection database.
             This behavior is overridden by the Sitecore.Analytics.Tracking.Database.config file.
        -->
        <param desc="contactRepository" ref="tracking/nullContactRepository" />
      </contactManager>

      <nullContactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true">
        <param desc="dataAdapterProvider" type="Sitecore.Analytics.DataAccess.Null.NullDataAdapterProvider" />
      </nullContactRepository>

      <sharedSessionState defaultProvider="InProc">
        <providers>
          <clear />
          <add name="InProc" type="System.Web.SessionState.InProcSessionStateStore" />
        </providers>
        <!-- Manager section is deprecated, use Sitecore.Analytics.Tracking.SharedSessionState.ISharedSessionStateManager which can be resolved from service provider. -->
        <manager type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateManager, Sitecore.Analytics">
          <param desc="configuration" ref="tracking/sharedSessionState/config" />
        </manager>

        <config type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateConfig, Sitecore.Analytics">
          <param desc="maxLockAge">5000</param>
          <!-- If an item in session state is already locked, this parameter is the time in milliseconds that the system is idle before making another attempt to apply a lock. -->
          <param desc="timeoutBetweenLockAttempts">200</param>
        </config>
      </sharedSessionState>

      <!-- A list of URL paths that are excluded from tracking. All requests to the following paths will not be tracked.
            Supported values and formats:
            The URL path must begin with '/'. Query strings are not supported.
            For example:
              <add path="/sitecore/default.aspx"/>
            Regular expressions are also supported.
            For example:
            The following regular expression disables tracking of every path that starts with '/api/service':
              <add regex="^\/api\/service"/>
            -->
      <untrackedPaths>
        <add path="/sitecore/default.aspx" />
        <add path="/sitecore/service/error.aspx" />
        <add path="/sitecore/service/Heartbeat.aspx" />
        <add path="/sitecore/service/keepalive.aspx" />
        <add path="/sitecore/service/nolicense.aspx" />
      </untrackedPaths>

      <!-- TRACKING SITE SETTINGS
          Specify tracking settings per site.
          Supported attributes:

            name: The name of the site.

            autoDetectBots: Enable or disable the automatic bot detection feature for a site if the global Analytics.AutoDetectBots setting is set to 'true'.
                            Note: if the global Analytics.AutoDetectBots setting is set to 'false' the automatic bot detection feature is disabled for every site.
                            Default value: true

          EXAMPLE:
          The following example disables automatic robot detection for the 'mysite' site:

          <siteSettings>
            <site name="mysite" autoDetectBots="false" />
          </siteSettings>
      -->
      <siteSettings>
      </siteSettings>
    </tracking>

    <services>
      <configurator type="Sitecore.Analytics.TrackingServicesConfigurator, Sitecore.Analytics" />
    </services>

    <api>
      <services>
        <configuration>
          <excludedAssemblies>
            <excludedAssembly id="Sitecore.Analytics.DataAccess">Sitecore.Analytics.DataAccess</excludedAssembly>
            <excludedAssembly id="Sitecore.Analytics.OmniChannel">Sitecore.Analytics.OmniChannel</excludedAssembly>
            <excludedAssembly id="Sitecore.Analytics.RobotDetection">Sitecore.Analytics.RobotDetection</excludedAssembly>
            <excludedAssembly id="Sitecore.Analytics.XConnect">Sitecore.Analytics.XConnect</excludedAssembly>
            <excludedAssembly id="Sitecore.Mvc.Analytics">Sitecore.Mvc.Analytics</excludedAssembly>
            <excludedAssembly id="Sitecore.Xdb.Tracking.Client">Sitecore.Xdb.Tracking.Client</excludedAssembly>
          </excludedAssemblies>
        </configuration>
      </services>
    </api>
  </sitecore>
</configuration>
